/**
 * Ë´ñÁêÜ„ÅÆÈ£õË∫çÊ§úÂá∫„Ç®„É≥„Ç∏„É≥ (Logic Leap Detector)
 * TypeScriptÁâà for Word Add-in
 */

export interface LogicLeap {
  text: string;
  score: number;
  type: 'pattern' | 'polished' | 'random' | 'ai' | 'manual';
  position: number;
  reason: string;
}

interface LeapPattern {
  pattern: RegExp;
  weight: number;
}

export class LogicLeapDetector {
  private logicalConnectors: string[];
  private leapPatterns: LeapPattern[];
  private tooPolishedPatterns: RegExp[];

  constructor() {
    this.logicalConnectors = [
      '„Å†„Åã„Çâ', '„Åó„Åü„Åå„Å£„Å¶', '„ÇÜ„Åà„Å´', '„Çà„Å£„Å¶',
      '„Å§„Åæ„Çä', '„Åô„Å™„Çè„Å°', 'Ë¶Å„Åô„Çã„Å´',
      '„Åì„ÅÆ„Çà„ÅÜ„Å´', '„Åì„ÅÆ„Åü„ÇÅ', '„Åù„ÅÆ„Åü„ÇÅ',
      '„Åù„Çå„ÇÜ„Åà', 'ÊïÖ„Å´', '„Åß„Åô„Åã„Çâ', '„Å™„ÅÆ„Åß'
    ];

    this.leapPatterns = [
      { pattern: /(.{20,})[„ÄÇ„ÄÅ]\s*(„Å†„Åã„Çâ|„Åó„Åü„Åå„Å£„Å¶|„ÇÜ„Åà„Å´|„Çà„Å£„Å¶)(.{20,})/g, weight: 0.7 },
      { pattern: /(ÂΩìÁÑ∂|Êòé„Çâ„Åã|Ë®Ä„ÅÜ„Åæ„Åß„ÇÇ„Å™„Åè|Âë®Áü•„ÅÆÈÄö„Çä|Áñë„ÅÑ„Çà„ÅÜ„ÇÇ„Å™„Åè)(.{10,})/g, weight: 0.8 },
      { pattern: /(.{30,})[„ÄÇ]\s*(„Å§„Åæ„Çä|„Åô„Å™„Çè„Å°|Ë¶Å„Åô„Çã„Å´)(.{10,})/g, weight: 0.6 },
      { pattern: /(Á∞°Âçò|ÂÆπÊòì|‰∏ÄÁõÆÁû≠ÁÑ∂|ÊòéÁôΩ)(.{10,})/g, weight: 0.65 },
      { pattern: /(.{40,})[„ÄÇ]\s*(„Åì„ÅÆ„Çà„ÅÜ„Å´|„Åì„ÅÆ„Åü„ÇÅ|„Åù„ÅÆ„Åü„ÇÅ)(.{15,})/g, weight: 0.65 }
    ];

    this.tooPolishedPatterns = [
      /ÈáçË¶Å„Åß„Åô„ÄÇ(.{5,20})ÈáçË¶Å„Åß„Åô/g,
      /Ê≥®ÊÑè„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ(.{5,20})Ê≥®ÊÑè„ÅåÂøÖË¶Å„Åß„Åô/g,
      /ËÄÉ„Åà„Çâ„Çå„Åæ„Åô„ÄÇ(.{5,20})ËÄÉ„Åà„Çâ„Çå„Åæ„Åô/g,
      /(„Åæ„Åö|Ê¨°„Å´|ÊúÄÂæå„Å´)(.{20,})(„Åæ„Åö|Ê¨°„Å´|ÊúÄÂæå„Å´)/g,
      /„Åß„Åô„ÄÇ(.{5,15})„Åß„Åô„ÄÇ(.{5,15})„Åß„Åô/g
    ];
  }

  public detect(text: string, randomRate: number = 5): LogicLeap[] {
    const leaps: LogicLeap[] = [];

    leaps.push(...this.detectByPatterns(text));
    leaps.push(...this.detectTooPolished(text));

    if (randomRate > 0) {
      const randomDetector = new RandomDetector(randomRate);
      leaps.push(...randomDetector.detect(text));
    }

    return this.deduplicateAndScore(leaps);
  }

  private detectByPatterns(text: string): LogicLeap[] {
    const leaps: LogicLeap[] = [];

    for (const { pattern, weight } of this.leapPatterns) {
      const regex = new RegExp(pattern.source, pattern.flags);
      let match: RegExpExecArray | null;

      while ((match = regex.exec(text)) !== null) {
        const matchedText = match[0];
        const position = match.index;

        const contextScore = this.calculateContextScore(text, position, matchedText.length);
        const finalScore = Math.min(100, Math.round(weight * contextScore * 100));

        if (finalScore >= 50) {
          leaps.push({
            text: matchedText.substring(0, 100) + (matchedText.length > 100 ? '...' : ''),
            score: finalScore,
            type: 'pattern',
            position: position,
            reason: this.getReasonForPattern(matchedText)
          });
        }
      }
    }

    return leaps;
  }

  private detectTooPolished(text: string): LogicLeap[] {
    const leaps: LogicLeap[] = [];

    for (const pattern of this.tooPolishedPatterns) {
      const regex = new RegExp(pattern.source, pattern.flags);
      let match: RegExpExecArray | null;

      while ((match = regex.exec(text)) !== null) {
        leaps.push({
          text: match[0].substring(0, 100),
          score: 75,
          type: 'polished',
          position: match.index,
          reason: 'Êï¥„ÅÑ„Åô„Åé„ÅüÊñá‰Ωì„Åß„Åôü§ñ'
        });
      }
    }

    return leaps;
  }

  private calculateContextScore(text: string, position: number, length: number): number {
    const before = text.substring(Math.max(0, position - 100), position);
    const after = text.substring(position + length, Math.min(text.length, position + length + 100));

    let score = 1.0;

    if (before.length < 20) score *= 0.8;
    if (after.length < 20) score *= 0.8;

    const connectorCount = this.countConnectors(before + after);
    if (connectorCount >= 2) score *= 1.2;

    if (/„Åß„Åô„ÄÇ(.{5,20})„Åß„Åô„ÄÇ/.test(before + after)) {
      score *= 1.3;
    }

    return Math.min(1.5, score);
  }

  private countConnectors(text: string): number {
    let count = 0;
    for (const connector of this.logicalConnectors) {
      if (text.includes(connector)) count++;
    }
    return count;
  }

  private getReasonForPattern(text: string): string {
    if (text.includes('„Å†„Åã„Çâ') || text.includes('„Åó„Åü„Åå„Å£„Å¶')) {
      return 'Ë´ñÁêÜ„ÅÆÈ£õË∫ç„ÇíÊ§úÂá∫„Åó„Åæ„Åó„Åü';
    }
    if (text.includes('„Å§„Åæ„Çä') || text.includes('Ë¶Å„Åô„Çã„Å´')) {
      return 'Ë¶ÅÁ¥Ñ„ÅåÂîêÁ™Å„Åã„ÇÇ„Åó„Çå„Åæ„Åõ„Çì';
    }
    if (text.includes('ÂΩìÁÑ∂') || text.includes('Êòé„Çâ„Åã')) {
      return 'ÂâçÊèê„Åå‰∏çÊòéÁ¢∫„Å™ÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô';
    }
    return 'Ë´ñÁêÜ„ÅÆÈ£õË∫ç„ÅÆÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô';
  }

  private deduplicateAndScore(leaps: LogicLeap[]): LogicLeap[] {
    const merged: LogicLeap[] = [];
    const sorted = leaps.sort((a, b) => a.position - b.position);

    for (let i = 0; i < sorted.length; i++) {
      const current = sorted[i];

      const isDuplicate = merged.some(m =>
        Math.abs(m.position - current.position) < 50
      );

      if (!isDuplicate) {
        merged.push(current);
      }
    }

    return merged.slice(0, 10);
  }
}

/**
 * „É©„É≥„ÉÄ„É†Ê§úÂá∫Âô® (Random Detector)
 */
class RandomDetector {
  private rate: number;
  private whimsicalMessages: string[];

  constructor(rate: number) {
    this.rate = rate || 5;

    this.whimsicalMessages = [
      '„Å™„Çì„Å®„Å™„ÅèÊ∞ó„Å´„Å™„Çä„Åæ„Åó„Åüü™Ω',
      '„Åì„Åì„ÄÅ„Å°„Çá„Å£„Å®È£õ„Çì„Åß„ÇãÊ∞ó„Åå„Åô„Çã...',
      'Âãò„Åß„Åô‚ú®',
      '„Éî„É≥„Å®„Åç„Åæ„Åó„Åü',
      'ÁæΩ„Åå„Åñ„Çè„Å§„Åç„Åæ„Åó„Åü',
      'Áõ¥ÊÑüÁöÑ„Å´Âºï„Å£„Åã„Åã„Çä„Åæ„Åó„Åü',
      '„Å™„Åú„Åã„Åì„Åì„Å´ÂèçÂøú„Åó„Å°„ÇÉ„ÅÜ',
      '„Åµ„Å®„Åó„ÅüÈÅïÂíåÊÑü„ÇíÊÑü„Åò„Åæ„Åó„Åü',
      '„Çπ„É´„Éº„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü',
      'Ê∞ó„ÅÆ„Åõ„ÅÑ„Åã„ÇÇ„Åó„Çå„Åæ„Åõ„Çì„Åå...'
    ];
  }

  public detect(text: string): LogicLeap[] {
    if (this.rate <= 0) {
      return [];
    }

    const sentences = this.extractSentences(text);
    const detections: LogicLeap[] = [];

    for (const sentence of sentences) {
      if (Math.random() * 100 < this.rate) {
        const detection = this.createRandomDetection(sentence);
        detections.push(detection);
      }
    }

    return detections;
  }

  private extractSentences(text: string): Array<{ text: string; position: number }> {
    const sentences: Array<{ text: string; position: number }> = [];
    const parts = text.split(/[„ÄÇ!?]/);

    let position = 0;
    for (const part of parts) {
      const trimmed = part.trim();
      if (trimmed.length >= 10) {
        sentences.push({
          text: trimmed,
          position: text.indexOf(part, position)
        });
        position += part.length + 1;
      }
    }

    return sentences;
  }

  private createRandomDetection(sentence: { text: string; position: number }): LogicLeap {
    const message = this.getRandomMessage();
    const score = Math.round(30 + Math.random() * 30);

    return {
      text: sentence.text.substring(0, 80) + (sentence.text.length > 80 ? '...' : ''),
      score: score,
      type: 'random',
      position: sentence.position,
      reason: message
    };
  }

  private getRandomMessage(): string {
    const index = Math.floor(Math.random() * this.whimsicalMessages.length);
    return this.whimsicalMessages[index];
  }
}
