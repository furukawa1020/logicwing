/**
 * Ë´ñÁêÜ„ÅÆÈ£õË∫ç„Çπ„Çø„É≥„ÉóÊã°ÂºµÊ©üËÉΩÔºà„É≠„É≥„É™„Å°„ÇÉ„Çìü™ΩÔºâ
 * Áµ±ÂêàÁâà Code.gs - „Åô„Åπ„Å¶„ÅÆÊ©üËÉΩ„ÇíÂê´„ÇÄÂÆåÂÖ®Áâà
 * 
 * „Åì„ÅÆ„Éï„Ç°„Ç§„É´„ÅØGoogle Apps Script„ÅßÁõ¥Êé•‰ΩøÁî®„Åß„Åç„Çã„Çà„ÅÜ„Å´
 * „Åô„Åπ„Å¶„ÅÆ„É¢„Ç∏„É•„Éº„É´„ÇíÁµ±Âêà„Åó„Å¶„ÅÑ„Åæ„Åô
 */

// ============================================================
// „É°„Ç§„É≥Ê©üËÉΩ
// ============================================================

function onOpen() {
  DocumentApp.getUi()
    .createMenu('ü™Ω „É≠„É≥„É™„Å°„ÇÉ„Çì')
    .addItem('Ë´ñÁêÜ„ÅÆÈ£õË∫ç„ÇíÊ§úÂá∫', 'detectLogicalLeaps')
    .addItem('ÈÅ∏ÊäûÁØÑÂõ≤„Å´ÊâãÂãï„ÅßÊäºÂç∞', 'manualStamp')
    .addSeparator()
    .addItem('ÊäºÂç∞Â±•Ê≠¥„ÇíË°®Á§∫', 'showHistory')
    .addItem('Ë®≠ÂÆö', 'showSettings')
    .addToUi();
}

function onInstall(e) {
  onOpen(e);
}

function detectLogicalLeaps() {
  const doc = DocumentApp.getActiveDocument();
  const body = doc.getBody();
  const text = body.getText();
  
  if (!text || text.trim().length === 0) {
    showMessage('ÊñáÁ´†„ÅåÂÖ•Âäõ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì', '„Ç®„É©„Éº');
    return;
  }
  
  const detector = new LogicLeapDetector();
  const leaps = detector.detect(text);
  
  if (leaps.length === 0) {
    showMessage('Ë´ñÁêÜ„ÅÆÈ£õË∫ç„ÅØÊ§úÂá∫„Åï„Çå„Åæ„Åõ„Çì„Åß„Åó„ÅüÔºÅ‚ú®\nÊñáÁ´†„ÅØË´ñÁêÜÁöÑ„Å´Êï¥„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇ', 'ÂÑ™ÁßÄ„Åß„Åô');
    return;
  }
  
  showStampAnimation(leaps);
}

function manualStamp() {
  const doc = DocumentApp.getActiveDocument();
  const selection = doc.getSelection();
  
  if (!selection) {
    showMessage('„ÉÜ„Ç≠„Çπ„Éà„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ', '„Ç®„É©„Éº');
    return;
  }
  
  const elements = selection.getRangeElements();
  if (elements.length === 0) {
    showMessage('ÊúâÂäπ„Å™„ÉÜ„Ç≠„Çπ„Éà„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì', '„Ç®„É©„Éº');
    return;
  }
  
  const element = elements[0].getElement();
  const text = element.asText().getText();
  
  const leap = {
    text: text.substring(0, 100),
    score: 100,
    type: 'manual',
    position: 0,
    reason: 'ÊâãÂãïÊäºÂç∞'
  };
  
  showStampAnimation([leap]);
}

function showHistory() {
  const html = HtmlService.createHtmlOutputFromFile('sidebar')
    .setTitle('ü™Ω ÊäºÂç∞Â±•Ê≠¥')
    .setWidth(320);
  DocumentApp.getUi().showSidebar(html);
}

function showSettings() {
  const html = HtmlService.createHtmlOutputFromFile('settings')
    .setWidth(400)
    .setHeight(600);
  DocumentApp.getUi().showModalDialog(html, '‚öôÔ∏è „É≠„É≥„É™„Å°„ÇÉ„ÇìË®≠ÂÆö');
}

function showStampAnimation(leaps) {
  const template = HtmlService.createTemplateFromFile('stamp_animation');
  template.leaps = JSON.stringify(leaps);
  
  const html = template.evaluate()
    .setWidth(500)
    .setHeight(400);
  
  DocumentApp.getUi().showModalDialog(html, '');
}

function showMessage(message, title) {
  DocumentApp.getUi().alert(title || '„ÅäÁü•„Çâ„Åõ', message, DocumentApp.getUi().ButtonSet.OK);
}

// ============================================================
// „Éá„Éº„ÇøÁÆ°ÁêÜ
// ============================================================

function saveStampData(leapData) {
  const userProperties = PropertiesService.getUserProperties();
  const historyKey = 'ronri_history';
  
  let history = [];
  const stored = userProperties.getProperty(historyKey);
  if (stored) {
    try {
      history = JSON.parse(stored);
    } catch (e) {
      history = [];
    }
  }
  
  const stampEntry = {
    text: leapData.text,
    score: leapData.score,
    type: leapData.type,
    reason: leapData.reason,
    timestamp: new Date().toISOString()
  };
  
  history.unshift(stampEntry);
  
  if (history.length > 100) {
    history = history.slice(0, 100);
  }
  
  userProperties.setProperty(historyKey, JSON.stringify(history));
  return true;
}

function getStampHistory() {
  const userProperties = PropertiesService.getUserProperties();
  const historyKey = 'ronri_history';
  const stored = userProperties.getProperty(historyKey);
  
  if (!stored) {
    return [];
  }
  
  try {
    return JSON.parse(stored);
  } catch (e) {
    return [];
  }
}

function saveSettings(settings) {
  const userProperties = PropertiesService.getUserProperties();
  userProperties.setProperty('ronri_settings', JSON.stringify(settings));
  return true;
}

function getSettings() {
  const userProperties = PropertiesService.getUserProperties();
  const stored = userProperties.getProperty('ronri_settings');
  
  const defaultSettings = {
    theme: 'logical_leap',
    randomRate: 5,
    enableSound: true,
    enableAI: false,
    aiApiKey: ''
  };
  
  if (!stored) {
    return defaultSettings;
  }
  
  try {
    return Object.assign(defaultSettings, JSON.parse(stored));
  } catch (e) {
    return defaultSettings;
  }
}

// ============================================================
// Ë´ñÁêÜÊ§úÂá∫„Ç®„É≥„Ç∏„É≥ (LogicLeapDetector)
// ============================================================

class LogicLeapDetector {
  constructor() {
    this.logicalConnectors = [
      '„Å†„Åã„Çâ', '„Åó„Åü„Åå„Å£„Å¶', '„ÇÜ„Åà„Å´', '„Çà„Å£„Å¶',
      '„Å§„Åæ„Çä', '„Åô„Å™„Çè„Å°', 'Ë¶Å„Åô„Çã„Å´',
      '„Åì„ÅÆ„Çà„ÅÜ„Å´', '„Åì„ÅÆ„Åü„ÇÅ', '„Åù„ÅÆ„Åü„ÇÅ',
      '„Åù„Çå„ÇÜ„Åà', 'ÊïÖ„Å´', '„Åß„Åô„Åã„Çâ', '„Å™„ÅÆ„Åß'
    ];
    
    this.leapPatterns = [
      { pattern: /(.{20,})[„ÄÇ„ÄÅ]\s*(„Å†„Åã„Çâ|„Åó„Åü„Åå„Å£„Å¶|„ÇÜ„Åà„Å´|„Çà„Å£„Å¶)(.{20,})/g, weight: 0.7 },
      { pattern: /(ÂΩìÁÑ∂|Êòé„Çâ„Åã|Ë®Ä„ÅÜ„Åæ„Åß„ÇÇ„Å™„Åè|Âë®Áü•„ÅÆÈÄö„Çä|Áñë„ÅÑ„Çà„ÅÜ„ÇÇ„Å™„Åè)(.{10,})/g, weight: 0.8 },
      { pattern: /(.{30,})[„ÄÇ]\s*(„Å§„Åæ„Çä|„Åô„Å™„Çè„Å°|Ë¶Å„Åô„Çã„Å´)(.{10,})/g, weight: 0.6 },
      { pattern: /(Á∞°Âçò|ÂÆπÊòì|‰∏ÄÁõÆÁû≠ÁÑ∂|ÊòéÁôΩ)(.{10,})/g, weight: 0.65 },
      { pattern: /(.{40,})[„ÄÇ]\s*(„Åì„ÅÆ„Çà„ÅÜ„Å´|„Åì„ÅÆ„Åü„ÇÅ|„Åù„ÅÆ„Åü„ÇÅ)(.{15,})/g, weight: 0.65 }
    ];
    
    this.tooPolishedPatterns = [
      /ÈáçË¶Å„Åß„Åô„ÄÇ(.{5,20})ÈáçË¶Å„Åß„Åô/g,
      /Ê≥®ÊÑè„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ(.{5,20})Ê≥®ÊÑè„ÅåÂøÖË¶Å„Åß„Åô/g,
      /ËÄÉ„Åà„Çâ„Çå„Åæ„Åô„ÄÇ(.{5,20})ËÄÉ„Åà„Çâ„Çå„Åæ„Åô/g,
      /(„Åæ„Åö|Ê¨°„Å´|ÊúÄÂæå„Å´)(.{20,})(„Åæ„Åö|Ê¨°„Å´|ÊúÄÂæå„Å´)/g,
      /„Åß„Åô„ÄÇ(.{5,15})„Åß„Åô„ÄÇ(.{5,15})„Åß„Åô/g
    ];
  }
  
  detect(text) {
    const leaps = [];
    const settings = getSettings();
    
    leaps.push(...this.detectByPatterns(text));
    leaps.push(...this.detectTooPolished(text));
    
    if (settings.randomRate > 0) {
      const randomDetector = new RandomDetector(settings.randomRate);
      leaps.push(...randomDetector.detect(text));
    }
    
    return this.deduplicateAndScore(leaps);
  }
  
  detectByPatterns(text) {
    const leaps = [];
    
    for (const { pattern, weight } of this.leapPatterns) {
      const regex = new RegExp(pattern.source, pattern.flags);
      let match;
      
      while ((match = regex.exec(text)) !== null) {
        const matchedText = match[0];
        const position = match.index;
        
        const contextScore = this.calculateContextScore(text, position, matchedText.length);
        const finalScore = Math.min(100, Math.round(weight * contextScore * 100));
        
        if (finalScore >= 50) {
          leaps.push({
            text: matchedText.substring(0, 100) + (matchedText.length > 100 ? '...' : ''),
            score: finalScore,
            type: 'pattern',
            position: position,
            reason: this.getReasonForPattern(matchedText)
          });
        }
      }
    }
    
    return leaps;
  }
  
  detectTooPolished(text) {
    const leaps = [];
    
    for (const pattern of this.tooPolishedPatterns) {
      const regex = new RegExp(pattern.source, pattern.flags);
      let match;
      
      while ((match = regex.exec(text)) !== null) {
        leaps.push({
          text: match[0].substring(0, 100),
          score: 75,
          type: 'polished',
          position: match.index,
          reason: 'Êï¥„ÅÑ„Åô„Åé„ÅüÊñá‰Ωì„Åß„Åôü§ñ'
        });
      }
    }
    
    return leaps;
  }
  
  calculateContextScore(text, position, length) {
    const before = text.substring(Math.max(0, position - 100), position);
    const after = text.substring(position + length, Math.min(text.length, position + length + 100));
    
    let score = 1.0;
    
    if (before.length < 20) score *= 0.8;
    if (after.length < 20) score *= 0.8;
    
    const connectorCount = this.countConnectors(before + after);
    if (connectorCount >= 2) score *= 1.2;
    
    if (/„Åß„Åô„ÄÇ(.{5,20})„Åß„Åô„ÄÇ/.test(before + after)) {
      score *= 1.3;
    }
    
    return Math.min(1.5, score);
  }
  
  countConnectors(text) {
    let count = 0;
    for (const connector of this.logicalConnectors) {
      if (text.includes(connector)) count++;
    }
    return count;
  }
  
  getReasonForPattern(text) {
    if (text.includes('„Å†„Åã„Çâ') || text.includes('„Åó„Åü„Åå„Å£„Å¶')) {
      return 'Ë´ñÁêÜ„ÅÆÈ£õË∫ç„ÇíÊ§úÂá∫„Åó„Åæ„Åó„Åü';
    }
    if (text.includes('„Å§„Åæ„Çä') || text.includes('Ë¶Å„Åô„Çã„Å´')) {
      return 'Ë¶ÅÁ¥Ñ„ÅåÂîêÁ™Å„Åã„ÇÇ„Åó„Çå„Åæ„Åõ„Çì';
    }
    if (text.includes('ÂΩìÁÑ∂') || text.includes('Êòé„Çâ„Åã')) {
      return 'ÂâçÊèê„Åå‰∏çÊòéÁ¢∫„Å™ÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô';
    }
    return 'Ë´ñÁêÜ„ÅÆÈ£õË∫ç„ÅÆÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô';
  }
  
  deduplicateAndScore(leaps) {
    const merged = [];
    const sorted = leaps.sort((a, b) => a.position - b.position);
    
    for (let i = 0; i < sorted.length; i++) {
      const current = sorted[i];
      
      const isDuplicate = merged.some(m => 
        Math.abs(m.position - current.position) < 50
      );
      
      if (!isDuplicate) {
        merged.push(current);
      }
    }
    
    return merged.slice(0, 10);
  }
}

// ============================================================
// „É©„É≥„ÉÄ„É†Ê§úÂá∫Âô® (RandomDetector)
// ============================================================

class RandomDetector {
  constructor(rate) {
    this.rate = rate || 5;
    
    this.whimsicalMessages = [
      '„Å™„Çì„Å®„Å™„ÅèÊ∞ó„Å´„Å™„Çä„Åæ„Åó„Åüü™Ω',
      '„Åì„Åì„ÄÅ„Å°„Çá„Å£„Å®È£õ„Çì„Åß„ÇãÊ∞ó„Åå„Åô„Çã...',
      'Âãò„Åß„Åô‚ú®',
      '„Éî„É≥„Å®„Åç„Åæ„Åó„Åü',
      'ÁæΩ„Åå„Åñ„Çè„Å§„Åç„Åæ„Åó„Åü',
      'Áõ¥ÊÑüÁöÑ„Å´Âºï„Å£„Åã„Åã„Çä„Åæ„Åó„Åü',
      '„Å™„Åú„Åã„Åì„Åì„Å´ÂèçÂøú„Åó„Å°„ÇÉ„ÅÜ',
      '„Åµ„Å®„Åó„ÅüÈÅïÂíåÊÑü„ÇíÊÑü„Åò„Åæ„Åó„Åü',
      '„Çπ„É´„Éº„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü',
      'Ê∞ó„ÅÆ„Åõ„ÅÑ„Åã„ÇÇ„Åó„Çå„Åæ„Åõ„Çì„Åå...'
    ];
  }
  
  detect(text) {
    if (this.rate <= 0) {
      return [];
    }
    
    const sentences = this.extractSentences(text);
    const detections = [];
    
    for (const sentence of sentences) {
      if (Math.random() * 100 < this.rate) {
        const detection = this.createRandomDetection(sentence);
        detections.push(detection);
      }
    }
    
    return detections;
  }
  
  extractSentences(text) {
    const sentences = [];
    const parts = text.split(/[„ÄÇ!?]/);
    
    let position = 0;
    for (const part of parts) {
      const trimmed = part.trim();
      if (trimmed.length >= 10) {
        sentences.push({
          text: trimmed,
          position: text.indexOf(part, position)
        });
        position += part.length + 1;
      }
    }
    
    return sentences;
  }
  
  createRandomDetection(sentence) {
    const message = this.getRandomMessage();
    const score = Math.round(30 + Math.random() * 30);
    
    return {
      text: sentence.text.substring(0, 80) + (sentence.text.length > 80 ? '...' : ''),
      score: score,
      type: 'random',
      position: sentence.position,
      reason: message
    };
  }
  
  getRandomMessage() {
    const index = Math.floor(Math.random() * this.whimsicalMessages.length);
    return this.whimsicalMessages[index];
  }
}

// ============================================================
// AIÊ§úÂá∫Âô® (AIAnalyzer) - „Ç™„Éó„Ç∑„Éß„É≥
// ============================================================

class AIAnalyzer {
  constructor(apiKey) {
    this.apiKey = apiKey;
    this.apiEndpoint = 'https://api.openai.com/v1/chat/completions';
    this.model = 'gpt-3.5-turbo';
  }
  
  analyzeLogicalLeaps(text) {
    if (!this.apiKey) {
      throw new Error('API Key„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
    }
    
    const prompt = this.buildPrompt(text);
    const response = this.callAPI(prompt);
    
    return this.parseResponse(response);
  }
  
  buildPrompt(text) {
    return `‰ª•‰∏ã„ÅÆÊñáÁ´†„Åã„ÇâË´ñÁêÜ„ÅÆÈ£õË∫ç„ÇíÊúÄÂ§ß5ÁÆáÊâÄÊ§úÂá∫„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇJSONÂΩ¢Âºè„ÅßËøî„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

ÊñáÁ´†:
${text}

Âá∫ÂäõÂΩ¢Âºè:
{"leaps":[{"text":"ÊäúÁ≤ã","position":0,"score":70,"reason":"ÁêÜÁî±"}]}`;
  }
  
  callAPI(prompt) {
    try {
      const response = UrlFetchApp.fetch(this.apiEndpoint, {
        method: 'post',
        contentType: 'application/json',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`
        },
        payload: JSON.stringify({
          model: this.model,
          messages: [
            { role: 'system', content: 'Ë´ñÁêÜÂàÜÊûê„ÅÆÂ∞ÇÈñÄÂÆ∂„Åß„Åô„ÄÇ' },
            { role: 'user', content: prompt }
          ],
          temperature: 0.3,
          max_tokens: 1000
        }),
        muteHttpExceptions: true
      });
      
      const result = JSON.parse(response.getContentText());
      
      if (result.error) {
        throw new Error(result.error.message);
      }
      
      return result.choices[0].message.content;
      
    } catch (e) {
      Logger.log(`APIÂëº„Å≥Âá∫„Åó„Ç®„É©„Éº: ${e.message}`);
      throw e;
    }
  }
  
  parseResponse(responseText) {
    try {
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        return [];
      }
      
      const data = JSON.parse(jsonMatch[0]);
      
      if (!data.leaps || !Array.isArray(data.leaps)) {
        return [];
      }
      
      return data.leaps.map(leap => ({
        text: leap.text || '',
        score: Math.min(100, Math.max(0, leap.score || 50)),
        type: 'ai',
        position: leap.position || 0,
        reason: leap.reason || 'AIÊ§úÂá∫'
      }));
      
    } catch (e) {
      Logger.log(`„É¨„Çπ„Éù„É≥„Çπ„ÅÆ„Éë„Éº„Çπ„Ç®„É©„Éº: ${e.message}`);
      return [];
    }
  }
}
